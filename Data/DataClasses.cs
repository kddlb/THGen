// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do one of these:
//
//    using THGen.Data;
//
//    var geniusSearch = GeniusSearch.FromJson(jsonString);
//    var tidalHifiCurrent = TidalHifiCurrent.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace THGen.Data
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class GeniusSearch
    {
        [JsonPropertyName("meta")]
        public Meta Meta { get; set; }

        [JsonPropertyName("response")]
        public Response Response { get; set; }
    }

    public partial class Meta
    {
        [JsonPropertyName("status")]
        public long Status { get; set; }
    }

    public partial class Response
    {
        [JsonPropertyName("hits")]
        public List<Hit> Hits { get; set; }
    }

    public partial class Hit
    {
        [JsonPropertyName("highlights")]
        public List<object> Highlights { get; set; }

        [JsonPropertyName("index")]
        public string Index { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("result")]
        public Result Result { get; set; }
    }

    public partial class Result
    {
        [JsonPropertyName("annotation_count")]
        public long AnnotationCount { get; set; }

        [JsonPropertyName("api_path")]
        public string ApiPath { get; set; }

        [JsonPropertyName("artist_names")]
        public string ArtistNames { get; set; }

        [JsonPropertyName("full_title")]
        public string FullTitle { get; set; }

        [JsonPropertyName("header_image_thumbnail_url")]
        public Uri HeaderImageThumbnailUrl { get; set; }

        [JsonPropertyName("header_image_url")]
        public Uri HeaderImageUrl { get; set; }

        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("lyrics_owner_id")]
        public long LyricsOwnerId { get; set; }

        [JsonPropertyName("lyrics_state")]
        public string LyricsState { get; set; }

        [JsonPropertyName("path")]
        public string Path { get; set; }

        [JsonPropertyName("pyongs_count")]
        public long? PyongsCount { get; set; }

        [JsonPropertyName("relationships_index_url")]
        public Uri RelationshipsIndexUrl { get; set; }

        [JsonPropertyName("release_date_components")]
        public ReleaseDateComponents ReleaseDateComponents { get; set; }

        [JsonPropertyName("release_date_for_display")]
        public string ReleaseDateForDisplay { get; set; }

        [JsonPropertyName("release_date_with_abbreviated_month_for_display")]
        public string ReleaseDateWithAbbreviatedMonthForDisplay { get; set; }

        [JsonPropertyName("song_art_image_thumbnail_url")]
        public Uri SongArtImageThumbnailUrl { get; set; }

        [JsonPropertyName("song_art_image_url")]
        public Uri SongArtImageUrl { get; set; }

        [JsonPropertyName("stats")]
        public Stats Stats { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("title_with_featured")]
        public string TitleWithFeatured { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }

        [JsonPropertyName("featured_artists")]
        public List<Artist> FeaturedArtists { get; set; }

        [JsonPropertyName("primary_artist")]
        public Artist PrimaryArtist { get; set; }
    }

    public partial class Artist
    {
        [JsonPropertyName("api_path")]
        public string ApiPath { get; set; }

        [JsonPropertyName("header_image_url")]
        public Uri HeaderImageUrl { get; set; }

        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("image_url")]
        public Uri ImageUrl { get; set; }

        [JsonPropertyName("is_meme_verified")]
        public bool IsMemeVerified { get; set; }

        [JsonPropertyName("is_verified")]
        public bool IsVerified { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("iq")]
        public long? Iq { get; set; }
    }

    public partial class ReleaseDateComponents
    {
        [JsonPropertyName("year")]
        public long Year { get; set; }

        [JsonPropertyName("month")]
        public long? Month { get; set; }

        [JsonPropertyName("day")]
        public long? Day { get; set; }
    }

    public partial class Stats
    {
        [JsonPropertyName("unreviewed_annotations")]
        public long UnreviewedAnnotations { get; set; }

        [JsonPropertyName("hot")]
        public bool Hot { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("pageviews")]
        public long? Pageviews { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("concurrents")]
        public long? Concurrents { get; set; }
    }

    public partial class TidalHifiCurrent
    {
        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("artists")]
        public string Artists { get; set; }

        [JsonPropertyName("album")]
        public string Album { get; set; }

        [JsonPropertyName("icon")]
        public string Icon { get; set; }

        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("url")]
        public Uri Url { get; set; }

        [JsonPropertyName("current")]
        public string Current { get; set; }

        [JsonPropertyName("duration")]
        public string Duration { get; set; }

        [JsonPropertyName("image")]
        public Uri Image { get; set; }

        [JsonPropertyName("artist")]
        public string Artist { get; set; }

        protected bool Equals(TidalHifiCurrent other)
        {
            return Url.Equals(other.Url);
        }

        public override int GetHashCode()
        {
            return Url.GetHashCode();
        }
    }

    public partial class GeniusSearch
    {
        public static GeniusSearch FromJson(string json) => JsonSerializer.Deserialize<GeniusSearch>(json, THGen.Data.Converter.Settings);
    }

    public partial class TidalHifiCurrent
    {
        public static TidalHifiCurrent FromJson(string json) => JsonSerializer.Deserialize<TidalHifiCurrent>(json, THGen.Data.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GeniusSearch self) => JsonSerializer.Serialize(self, THGen.Data.Converter.Settings);
        public static string ToJson(this TidalHifiCurrent self) => JsonSerializer.Serialize(self, THGen.Data.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
